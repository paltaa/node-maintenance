---
# tasks file for maintenance

- name: Create lock directory if doesnt exists
  file: 
    path: "{{ lock.directory }}"
    state: directory

- name: Check if lock is acquired
  stat:
    path: "{{lock.directory }}{{ lock.file }}"
  register: lock_data

- name: Log lock already acquired 
  syslogger: 
    msg: "Node maintenance lock already acquired"
    priority: warning
  when: lock_data.stat.exists 

- name: End if lock is acquired
  meta: end_host
  when: lock_data.stat.exists

- name: Copy scripts to host
  copy:
    src: "{{ scripts.directory }}"
    dest: "{{ scripts.target }}"

- name: Register scripts to run
  command: "ls {{ scripts.target }}"
  register: scripts

- name: Acquire lock
  file:
    path: "{{lock.directory }}{{ lock.file }}"
    state: touch

- name: Log start 
  syslogger: 
    msg: "Node maintenance starting"
    priority: info

# - name: Notify before running script

- name: Run scripts
  script: "{{ item }}"
  with_items: "{{ scripts.stdout_lines }}"

- name: Log finish 
  syslogger: 
    msg: "Node maintenance end"
    priority: info

# - name: Notify after running script

- name: Release lock
  file:
    path: "{{lock.path }}{{ lock.file }}"
    state: absent

- name: Clean up scripts
  file:
    path: "{{ scripts.target }}"
    state: absent



